#!/usr/bin/env python3
"""
Replace outdated aws creds with new creds.
"""
import argparse
import collections
import configparser
import datetime
import getpass
import itertools
import os.path

import boto3
import pytz


CREDS = os.path.expanduser('~/.aws/credentials')
KEY_TTL = datetime.timedelta(days=96)
AwsKey = collections.namedtuple('AwsKey', 'key created')


def utcnow():
    return datetime.datetime.utcnow().replace(tzinfo=pytz.UTC)


def get_keys():
    client = boto3.client('iam')
    paginator = client.get_paginator('list_access_keys')
    pager = paginator.paginate(UserName=getpass.getuser())
    return itertools.starmap(AwsKey, pager.search('AccessKeyMetadata[].[AccessKeyId, CreateDate]'))


def get_expired_keys():
    cutoff = utcnow() - KEY_TTL
    for key in get_keys():
        if key.created < cutoff:
            yield key


def create_key():
    client = boto3.client('iam')
    return client.create_access_key(UserName=getpass.getuser())['AccessKey']


def delete_key(key):
    client = boto3.client('iam')
    client.delete_access_key(
        UserName=getpass.getuser(),
        AccessKeyId=key,
    )


def replace_config(config, old_key, new_key, new_secret_key):
    for section_name in config.sections():
        section = config[section_name]
        if section.get('aws_access_key_id') == old_key:
            section['aws_access_key_id'] = new_key
            section['aws_secret_access_key'] = new_secret_key
    return config


def replace_expired_keys():
    credsfile = configparser.ConfigParser()
    credsfile.read(CREDS)
    for expired_key in get_expired_keys():
        new_key_data = create_key()
        replace_config(
            config=credsfile,
            old_key=expired_key.key,
            new_key=new_key_data['AccessKeyId'],
            new_secret_key=new_key_data['SecretAccessKey'],
        )
        delete_key(expired_key.key)
    with open(CREDS, 'w') as file:
        credsfile.write(file)


def tabulate(rows, *, header=None):
    all_rows = data_rows = list(rows)
    if header is not None:
        all_rows = [header] + all_rows
    lengths = [max(map(len, col)) for col in zip(*all_rows)]
    lines = [
        '|'.join(f" {field:<{length}} " for field, length in zip(row, lengths))
        for row in data_rows
    ]
    if header is not None:
        lines = [
            '|'.join(f" {field:^{length}} " for field, length in zip(header, lengths)),
            '+'.join('-' * (length + 2) for length in lengths),
        ] + lines
    return '\n'.join(lines)


def format_timedelta(timedelta):
    if timedelta < datetime.timedelta():
        return 'EXPIRED'
    days = timedelta.days
    return f"{days} days" if days != 1 else "1 day"


def view_keys():
    now = utcnow()
    table = tabulate(
        header=['Key', 'Created', 'Expires'],
        rows=[
            (key.key, str(key.created.date()), format_timedelta(KEY_TTL - (now - key.created)))
            for key in get_keys()
        ],
    )
    print(table)


def main():
    parser = argparse.ArgumentParser(description="manage aws creds")

    subparsers = parser.add_subparsers(dest='cmd')
    subparsers.required = True

    rotate_parser = subparsers.add_parser('rotate', help="rotate aws creds")
    rotate_parser.set_defaults(func=replace_expired_keys)

    view_parser = subparsers.add_parser('view', help="view aws creds")
    view_parser.set_defaults(func=view_keys)

    args = parser.parse_args()
    args.func()


if __name__ == '__main__':
    main()
